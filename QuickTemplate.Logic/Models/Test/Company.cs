//@GeneratedCode
namespace QuickTemplate.Logic.Models.Test
{
    using System;
    ///
    /// Generated by the generator
    ///
    public partial class Company
    {
        ///
        /// Generated by the generator
        ///
        static Company()
        {
            ClassConstructing();
            ClassConstructed();
        }
        static partial void ClassConstructing();
        static partial void ClassConstructed();
        ///
        /// Generated by the generator
        ///
        public Company()
        {
            Constructing();
            Constructed();
        }
        partial void Constructing();
        partial void Constructed();
        new internal QuickTemplate.Logic.Entities.Test.Company Source
        {
            get => (QuickTemplate.Logic.Entities.Test.Company)(_source ??= new QuickTemplate.Logic.Entities.Test.Company());
            set => _source = value;
        }
        public System.String Name
        {
            get => Source.Name;
            set => Source.Name = value;
        }
        public System.String Address
        {
            get => Source.Address;
            set => Source.Address = value;
        }
        public System.Collections.Generic.List<QuickTemplate.Logic.Models.Test.Customer> Customers
        {
            get => Source.Customers.Select(e => QuickTemplate.Logic.Models.Test.Customer.Create(e)).ToList();
            set => Source.Customers = value.Select(e => e.Source).ToList();
        }
        ///
        /// Generated by the generator
        ///
        internal void CopyProperties(QuickTemplate.Logic.Entities.Test.Company other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                Name = other.Name;
                Address = other.Address;
                Customers = other.Customers.Select(e => QuickTemplate.Logic.Models.Test.Customer.Create((object)e)).ToList();
                RowVersion = other.RowVersion;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(QuickTemplate.Logic.Entities.Test.Company other, ref bool handled);
        partial void AfterCopyProperties(QuickTemplate.Logic.Entities.Test.Company other);
        ///
        /// Generated by the generator
        ///
        internal void CopyProperties(QuickTemplate.Logic.Models.Test.Company other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                Name = other.Name;
                Address = other.Address;
                Customers = other.Customers;
                RowVersion = other.RowVersion;
                Id = other.Id;
            }
            AfterCopyProperties(other);
        }
        partial void BeforeCopyProperties(QuickTemplate.Logic.Models.Test.Company other, ref bool handled);
        partial void AfterCopyProperties(QuickTemplate.Logic.Models.Test.Company other);
        ///
        /// Generated by the generator
        ///
        public override bool Equals(object? obj)
        {
            bool result = false;
            if (obj is Models.Test.Company other)
            {
                result = IsEqualsWith(RowVersion, other.RowVersion)
                && Id == other.Id;
            }
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public override int GetHashCode()
        {
            return HashCode.Combine(Name, Address, Customers, RowVersion, Id);
        }
        ///
        /// Generated by the generator
        ///
        public static QuickTemplate.Logic.Models.Test.Company Create()
        {
            BeforeCreate();
            var result = new QuickTemplate.Logic.Models.Test.Company();
            AfterCreate(result);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QuickTemplate.Logic.Models.Test.Company Create(object other)
        {
            BeforeCreate(other);
            CommonBase.Extensions.ObjectExtensions.CheckArgument(other, nameof(other));
            var result = new QuickTemplate.Logic.Models.Test.Company();
            CommonBase.Extensions.ObjectExtensions.CopyFrom(result, other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        public static QuickTemplate.Logic.Models.Test.Company Create(QuickTemplate.Logic.Models.Test.Company other)
        {
            BeforeCreate(other);
            var result = new QuickTemplate.Logic.Models.Test.Company();
            result.CopyProperties(other);
            AfterCreate(result, other);
            return result;
        }
        ///
        /// Generated by the generator
        ///
        internal static QuickTemplate.Logic.Models.Test.Company Create(QuickTemplate.Logic.Entities.Test.Company other)
        {
            BeforeCreate(other);
            var result = new QuickTemplate.Logic.Models.Test.Company();
            result.Source = other;
            AfterCreate(result, other);
            return result;
        }
        static partial void BeforeCreate();
        static partial void AfterCreate(QuickTemplate.Logic.Models.Test.Company instance);
        static partial void BeforeCreate(object other);
        static partial void AfterCreate(QuickTemplate.Logic.Models.Test.Company instance, object other);
        static partial void BeforeCreate(QuickTemplate.Logic.Models.Test.Company other);
        static partial void AfterCreate(QuickTemplate.Logic.Models.Test.Company instance, QuickTemplate.Logic.Models.Test.Company other);
        static partial void BeforeCreate(QuickTemplate.Logic.Entities.Test.Company other);
        static partial void AfterCreate(QuickTemplate.Logic.Models.Test.Company instance, QuickTemplate.Logic.Entities.Test.Company other);
    }
}
